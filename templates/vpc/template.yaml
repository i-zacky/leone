AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: VPC

Parameters:
  Project:
    Type: String
  Env:
    Type: String

  CIDR:
    Type: String

  PublicSubnetCIDRA:
    Type: String
  PublicSubnetCIDRC:
    Type: String
  PublicSubnetCIDRD:
    Type: String

  PrivateSubnetCIDRA:
    Type: String
  PrivateSubnetCIDRC:
    Type: String
  PrivateSubnetCIDRD:
    Type: String

Resources:
  VPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: vpc.yaml
      Parameters:
        VPCName: !Sub '${Env}-${Project}-vpc'
        CIDR: !Ref CIDR

  InternetGateway:
    Type: AWS::Serverless::Application
    Properties:
      Location: internet-gateway.yaml
      Parameters:
        InternetGatewayName: !Sub '${Env}-${Project}-igw'
        VpcId: !GetAtt VPC.Outputs.VpcId

  NetworkAcl:
    Type: AWS::Serverless::Application
    Properties:
      Location: network-acl.yaml
      Parameters:
        NetworkAclName: !Sub '${Env}-${Project}-network-acl'
        VpcId: !GetAtt VPC.Outputs.VpcId

  PublicSubnetA:
    Type: AWS::Serverless::Application
    Properties:
      Location: subnet.yaml
      Parameters:
        SubnetName: !Sub '${Env}-${Project}-public-a'
        VpcId: !GetAtt VPC.Outputs.VpcId
        CidrBlock: !Ref PublicSubnetCIDRA
        AvailabilityZone: !Sub '${AWS::Region}a'

  PublicNetworkAclAssociationA:
    Type: AWS::Serverless::Application
    Properties:
      Location: network-acl-association.yaml
      Parameters:
        SubnetId: !GetAtt PublicSubnetA.Outputs.SubnetId
        NetworkAclId: !GetAtt NetworkAcl.Outputs.NetworkAclId

  PublicRouteA:
    Type: AWS::Serverless::Application
    Properties:
      Location: public-route.yaml
      Parameters:
        RouteTableName: !Sub '${Env}-${Project}-public-rt-a'
        VpcId: !GetAtt VPC.Outputs.VpcId
        SubnetId: !GetAtt PublicSubnetA.Outputs.SubnetId
        GatewayId: !GetAtt InternetGateway.Outputs.InternetGatewayId

  PublicSubnetC:
    Type: AWS::Serverless::Application
    Properties:
      Location: subnet.yaml
      Parameters:
        SubnetName: !Sub '${Env}-${Project}-public-c'
        VpcId: !GetAtt VPC.Outputs.VpcId
        CidrBlock: !Ref PublicSubnetCIDRC
        AvailabilityZone: !Sub '${AWS::Region}c'

  PublicNetworkAclAssociationC:
    Type: AWS::Serverless::Application
    Properties:
      Location: network-acl-association.yaml
      Parameters:
        SubnetId: !GetAtt PublicSubnetC.Outputs.SubnetId
        NetworkAclId: !GetAtt NetworkAcl.Outputs.NetworkAclId

  PublicRouteC:
    Type: AWS::Serverless::Application
    Properties:
      Location: public-route.yaml
      Parameters:
        RouteTableName: !Sub '${Env}-${Project}-public-rt-c'
        VpcId: !GetAtt VPC.Outputs.VpcId
        SubnetId: !GetAtt PublicSubnetC.Outputs.SubnetId
        GatewayId: !GetAtt InternetGateway.Outputs.InternetGatewayId

  PublicSubnetD:
    Type: AWS::Serverless::Application
    Properties:
      Location: subnet.yaml
      Parameters:
        SubnetName: !Sub '${Env}-${Project}-public-d'
        VpcId: !GetAtt VPC.Outputs.VpcId
        CidrBlock: !Ref PublicSubnetCIDRD
        AvailabilityZone: !Sub '${AWS::Region}d'

  PublicNetworkAclAssociationD:
    Type: AWS::Serverless::Application
    Properties:
      Location: network-acl-association.yaml
      Parameters:
        SubnetId: !GetAtt PublicSubnetD.Outputs.SubnetId
        NetworkAclId: !GetAtt NetworkAcl.Outputs.NetworkAclId

  PublicRouteD:
    Type: AWS::Serverless::Application
    Properties:
      Location: public-route.yaml
      Parameters:
        RouteTableName: !Sub '${Env}-${Project}-public-rt-d'
        VpcId: !GetAtt VPC.Outputs.VpcId
        SubnetId: !GetAtt PublicSubnetD.Outputs.SubnetId
        GatewayId: !GetAtt InternetGateway.Outputs.InternetGatewayId

  PrivateSubnetA:
    Type: AWS::Serverless::Application
    Properties:
      Location: subnet.yaml
      Parameters:
        SubnetName: !Sub '${Env}-${Project}-private-a'
        VpcId: !GetAtt VPC.Outputs.VpcId
        CidrBlock: !Ref PrivateSubnetCIDRA
        AvailabilityZone: !Sub '${AWS::Region}a'

  PrivateNetworkAclAssociationA:
    Type: AWS::Serverless::Application
    Properties:
      Location: network-acl-association.yaml
      Parameters:
        SubnetId: !GetAtt PrivateSubnetA.Outputs.SubnetId
        NetworkAclId: !GetAtt NetworkAcl.Outputs.NetworkAclId

  NatEIPA:
    Type: AWS::Serverless::Application
    Properties:
      Location: eip.yaml
      Parameters:
        EIPName: !Sub '${Env}-${Project}-eip-a'

  NatGatewayA:
    Type: AWS::Serverless::Application
    Properties:
      Location: nat-gateway.yaml
      Parameters:
        NatGatewayName: !Sub '${Env}-${Project}-natgw-a'
        AllocationId: !GetAtt NatEIPA.Outputs.AllocationId
        SubnetId: !GetAtt PublicSubnetA.Outputs.SubnetId

  PrivateRouteA:
    Type: AWS::Serverless::Application
    Properties:
      Location: private-route.yaml
      Parameters:
        RouteTableName: !Sub '${Env}-${Project}-private-rt-a'
        VpcId: !GetAtt VPC.Outputs.VpcId
        SubnetId: !GetAtt PrivateSubnetA.Outputs.SubnetId
        NatGatewayId: !GetAtt NatGatewayA.Outputs.NatGatewayId

  PrivateSubnetC:
    Type: AWS::Serverless::Application
    Properties:
      Location: subnet.yaml
      Parameters:
        SubnetName: !Sub '${Env}-${Project}-private-c'
        VpcId: !GetAtt VPC.Outputs.VpcId
        CidrBlock: !Ref PrivateSubnetCIDRC
        AvailabilityZone: !Sub '${AWS::Region}c'

  PrivateNetworkAclAssociationC:
    Type: AWS::Serverless::Application
    Properties:
      Location: network-acl-association.yaml
      Parameters:
        SubnetId: !GetAtt PrivateSubnetC.Outputs.SubnetId
        NetworkAclId: !GetAtt NetworkAcl.Outputs.NetworkAclId

  NatEIPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: eip.yaml
      Parameters:
        EIPName: !Sub '${Env}-${Project}-eip-c'

  NatGatewayC:
    Type: AWS::Serverless::Application
    Properties:
      Location: nat-gateway.yaml
      Parameters:
        NatGatewayName: !Sub '${Env}-${Project}-natgw-c'
        AllocationId: !GetAtt NatEIPC.Outputs.AllocationId
        SubnetId: !GetAtt PublicSubnetC.Outputs.SubnetId

  PrivateRouteC:
    Type: AWS::Serverless::Application
    Properties:
      Location: private-route.yaml
      Parameters:
        RouteTableName: !Sub '${Env}-${Project}-private-rt-c'
        VpcId: !GetAtt VPC.Outputs.VpcId
        SubnetId: !GetAtt PrivateSubnetC.Outputs.SubnetId
        NatGatewayId: !GetAtt NatGatewayC.Outputs.NatGatewayId

  PrivateSubnetD:
    Type: AWS::Serverless::Application
    Properties:
      Location: subnet.yaml
      Parameters:
        SubnetName: !Sub '${Env}-${Project}-private-d'
        VpcId: !GetAtt VPC.Outputs.VpcId
        CidrBlock: !Ref PrivateSubnetCIDRD
        AvailabilityZone: !Sub '${AWS::Region}d'

  PrivateNetworkAclAssociationD:
    Type: AWS::Serverless::Application
    Properties:
      Location: network-acl-association.yaml
      Parameters:
        SubnetId: !GetAtt PrivateSubnetD.Outputs.SubnetId
        NetworkAclId: !GetAtt NetworkAcl.Outputs.NetworkAclId

  NatEIPD:
    Type: AWS::Serverless::Application
    Properties:
      Location: eip.yaml
      Parameters:
        EIPName: !Sub '${Env}-${Project}-eip-d'

  NatGatewayD:
    Type: AWS::Serverless::Application
    Properties:
      Location: nat-gateway.yaml
      Parameters:
        NatGatewayName: !Sub '${Env}-${Project}-natgw-d'
        AllocationId: !GetAtt NatEIPD.Outputs.AllocationId
        SubnetId: !GetAtt PublicSubnetD.Outputs.SubnetId

  PrivateRouteD:
    Type: AWS::Serverless::Application
    Properties:
      Location: private-route.yaml
      Parameters:
        RouteTableName: !Sub '${Env}-${Project}-private-rt-d'
        VpcId: !GetAtt VPC.Outputs.VpcId
        SubnetId: !GetAtt PrivateSubnetD.Outputs.SubnetId
        NatGatewayId: !GetAtt NatGatewayD.Outputs.NatGatewayId

Outputs:
  VpcId:
    Value: !GetAtt VPC.Outputs.VpcId

  PublicSubnetIds:
    Value: !Sub '${PublicSubnetA.Outputs.SubnetId},${PublicSubnetC.Outputs.SubnetId},${PublicSubnetD.Outputs.SubnetId}'

  PrivateSubnetIds:
    Value: !Sub '${PrivateSubnetA.Outputs.SubnetId},${PrivateSubnetC.Outputs.SubnetId},${PrivateSubnetD.Outputs.SubnetId}'
