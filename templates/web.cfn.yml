AWSTemplateFormatVersion: 2010-09-09
Description: Web Service of ECS on Fargate

Parameters:
  Project:
    Default: leone
    Type: String
    Description: Project Name
  Env:
    Default: dev
    Type: String
    Description: Environment Name

  VPCStackName:
    Type: String
    Description: Stack Name of VPC
  SGStackName:
    Type: String
    Description: Stack Name of SecurityGroup
  ECRStackName:
    Type: String
    Description: Stack Name of ECR
  ECSStackName:
    Type: String
    Description: Stack Name of ECS
  ACMStackName:
    Type: String
    Description: Stack Name of ACM

  DomainName:
    Type: String
    Description: Domain Name
  HostedZoneId:
    Type: String
    Description: Hosted Zone Id
  DockerImageTag:
    Type: String
    Description: Docker Image Tag

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/fargate/${Env}-${Project}-web"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Env}-${Project}-web-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      TaskRoleArn:
        Fn::ImportValue: !Sub "${ECSStackName}-task-role-arn"
      ExecutionRoleArn:
        Fn::ImportValue: !Sub "${ECSStackName}-task-exec-role-arn"
      ContainerDefinitions:
        - Name: !Sub "${Env}-${Project}-web-container"
          Image: !Sub
            - "${RepositoryURL}:${DockerImageTag}"
            - RepositoryURL:
                Fn::ImportValue: !Sub "${ECRStackName}-web-repository-uri"
              DockerImageTag: !Ref DockerImageTag
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Sub "${Env}-${Project}-web"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Env}-${Project}-web-alb"
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-public-subnet-a-id"
        - Fn::ImportValue: !Sub "${VPCStackName}-public-subnet-c-id"
        - Fn::ImportValue: !Sub "${VPCStackName}-public-subnet-d-id"
      SecurityGroups:
        - Fn::ImportValue: !Sub "${SGStackName}-public-sg-id"
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-web-alb"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Env}-${Project}-web-tg"
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-id"
      Protocol: HTTP
      Port: 80
      TargetType: ip
      Matcher:
        HttpCode: 200
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-web-tg"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ApplicationLoadBalancer
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTPS
      Port: 443
      SslPolicy: "ELBSecurityPolicy-TLS-1-2-2017-01"
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub "${ACMStackName}-certificate-arn"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ARecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Name: !Ref DomainName
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationLoadBalancer
      - ECSTaskDefinition
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${ECSStackName}-cluster-arn"
      ServiceName: !Sub "${Env}-${Project}-web-service"
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub "${Env}-${Project}-web-container"
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${SGStackName}-ecs-web-sg-id"
          Subnets:
            - Fn::ImportValue: !Sub "${VPCStackName}-public-subnet-a-id"
            - Fn::ImportValue: !Sub "${VPCStackName}-public-subnet-c-id"
            - Fn::ImportValue: !Sub "${VPCStackName}-public-subnet-d-id"

Outputs:
  LogGroupArn:
    Value: !GetAtt LogGroup.Arn
    Export:
      Name: !Sub "${AWS::StackName}-log-group-arn"

  ECSTaskDefinitionArn:
    Value: !Ref ECSTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-ecs-task-definition-arn"

  ApplicationLoadBalancerArn:
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-alb-arn"
  ApplicationLoadBalancerDNSName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-alb-dns-name"
  ApplicationLoadBalancerHostedZoneId:
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub "${AWS::StackName}-alb-hosted-zone-id"
  ApplicationLoadBalancerFullName:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
    Export:
      Name: !Sub "${AWS::StackName}-alb-full-name"
  ApplicationLoadBalancerName:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub "${AWS::StackName}-alb-name"

  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-tg-arn"
  TargetGroupFullName:
    Value: !GetAtt TargetGroup.TargetGroupFullName
    Export:
      Name: !Sub "${AWS::StackName}-tg-full-name"
  TargetGroupName:
    Value: !GetAtt TargetGroup.TargetGroupName
    Export:
      Name: !Sub "${AWS::StackName}-tg-name"

  ECSServiceArn:
    Value: !Ref ECSService
    Export:
      Name: !Sub "${AWS::StackName}-ecs-service-arn"
  ECSServiceName:
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${AWS::StackName}-ecs-service-name"
