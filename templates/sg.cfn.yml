AWSTemplateFormatVersion: 2010-09-09
Description: Security Group

Parameters:
  Project:
    Default: leone
    Type: String
    Description: Project Name
  Env:
    Default: dev
    Type: String
    Description: Environment Name

  VPCStackName:
    Type: String
    Description: Stack Name of VPC

  PublicSubnetCIDRA:
    Type: String
    Description: Public Subnet CIDR Block AZ-A
  PublicSubnetCIDRC:
    Type: String
    Description: Public Subnet CIDR Block AZ-C
  PublicSubnetCIDRD:
    Type: String
    Description: Public Subnet CIDR Block AZ-D

  PrivateSubnetCIDRA:
    Type: String
    Description: Private Subnet CIDR Block AZ-A
  PrivateSubnetCIDRC:
    Type: String
    Description: Private Subnet CIDR Block AZ-C
  PrivateSubnetCIDRD:
    Type: String
    Description: Private Subnet CIDR Block AZ-D

Resources:
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Project}-bastion-sg"
      GroupDescription: !Sub "${Env}-${Project}-bastion-sg"
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          Description: SSH
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-bastion-sg"

  AuroraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Project}-aurora-sg"
      GroupDescription: !Sub "${Env}-${Project}-aurora-sg"
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 5432
          ToPort: 5432
          Description: PostgreSQL Port
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-aurora-sg"

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Project}-public-sg"
      GroupDescription: !Sub "${Env}-${Project}-public-sg"
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-id"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref PublicSubnetCIDRA
          Description: Public Subnet IP AZ-A
        - IpProtocol: -1
          CidrIp: !Ref PublicSubnetCIDRC
          Description: Public Subnet IP AZ-C
        - IpProtocol: -1
          CidrIp: !Ref PublicSubnetCIDRD
          Description: Public Subnet IP AZ-D
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-public-sg"

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Project}-private-sg"
      GroupDescription: !Sub "${Env}-${Project}-private-sg"
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-id"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnetCIDRA
          Description: Internal Subnet IP AZ-A
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnetCIDRC
          Description: Internal Subnet IP AZ-C
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnetCIDRD
          Description: Internal Subnet IP AZ-D
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref PublicSecurityGroup
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-private-sg"

  ECSWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Project}-ecs-web-sg"
      GroupDescription: !Sub "${Env}-${Project}-ecs-web-sg"
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PrivateSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-ecs-web-sg"

  ECSAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Project}-ecs-api-sg"
      GroupDescription: !Sub "${Env}-${Project}-ecs-api-sg"
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref PrivateSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref PublicSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Project}-ecs-api-sg"

Outputs:
  BastionSecurityGroupId:
    Value: !GetAtt BastionSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-bastion-sg-id"

  AuroraSecurityGroupId:
    Value: !GetAtt AuroraSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-aurora-sg-id"

  PublicSecurityGroupId:
    Value: !GetAtt PublicSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-public-sg-id"

  PrivateSecurityGroupId:
    Value: !GetAtt PrivateSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-private-sg-id"

  ECSWebSecurityGroupId:
    Value: !GetAtt ECSWebSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ecs-web-sg-id"

  ECSAPISecurityGroupId:
    Value: !GetAtt ECSAPISecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ecs-api-sg-id"
