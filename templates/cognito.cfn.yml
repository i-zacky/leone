AWSTemplateFormatVersion: 2010-09-09
Description: Cognito

Parameters:
  Project:
    Default: leone
    Type: String
    Description: Project Name
  Env:
    Default: dev
    Type: String
    Description: Environment Name
  KMSStackName:
    Type: String
    Description: Stack Name of KMS
  AdministratorEmail:
    Type: String
    Description: Administrator User Email
  LambdaFunctionsBucketName:
    Type: String
    Description: Lambda Functions Bucket Name
  CognitoLambdaS3Key:
    Type: String
    Description: Lambda Function S3 Key
  CognitoLambdaLayerS3Key:
    Type: String
    Description: Lambda Function Layer S3 Key
  SendGridAPIKey:
    Type: String
    Description: SendGrid API Key

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Env}-${Project}-user-pool"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 9
          RequireLowercase: true
          RequireUppercase: false
          RequireNumbers: true
          TemporaryPasswordValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "${Env}-${Project}-user-pool-client"
      GenerateSecret: false
      RefreshTokenValidity: 7
      AccessTokenValidity: 1
      IdTokenValidity: 1
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true
      ReadAttributes:
        - email
      WriteAttributes:
        - email

  AdministratorUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      ForceAliasCreation: true
      MessageAction: SUPPRESS
      UserAttributes:
        - Name: email
          Value: !Ref AdministratorEmail
        - Name: email_verified
          Value: True
      Username: !Ref AdministratorEmail
      UserPoolId: !Ref UserPool

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Env}-${Project}-cognito-lambda"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Env}-${Project}-cognito-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: kms
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: kms:Decrypt
                Resource:
                  Fn::ImportValue: !Sub "${KMSStackName}-cmk-arn"

  LambdaLayerVersion:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${Env}-${Project}-cognito-lambda-layer"
      Description: !Sub "${Env}-${Project}-cognito-lambda-layer"
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - nodejs14.x
      Content:
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: !Ref CognitoLambdaLayerS3Key

  LambdaLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref LambdaLayerVersion
      Principal: !Ref AWS::AccountId

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Env}-${Project}-cognito-lambda"
      Description:  !Sub "${Env}-${Project}-cognito-lambda"
      Code:
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: !Ref CognitoLambdaS3Key
      Handler: index.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Layers:
        - !Ref LambdaLayerVersion
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          KEY_ID:
            Fn::ImportValue: !Sub "${KMSStackName}-cmk-arn"
          KEY_ALIAS:
            Fn::ImportValue: !Sub "${KMSStackName}-cmk-alias-arn"
          SENDGRID_API_KEY: !Ref SendGridAPIKey

  LambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !GetAtt LambdaFunction.Arn
      SourceArn: !GetAtt UserPool.Arn

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-id"
  UserPoolArn:
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-arn"

  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-user-pool-client-id"

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-lambda-role-arn"

  LambdaLayerVersionArn:
    Value: !Ref LambdaLayerVersion
    Export:
      Name: !Sub "${AWS::StackName}-lambda-layer-version-arn"

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-lambda-arn"