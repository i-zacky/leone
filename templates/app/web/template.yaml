AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Web Service of ECS on Fargate

Parameters:
  Project:
    Type: String
    Description: Project Name
  Env:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prod
    Description: Environment Name

  DomainName:
    Type: String
    Description: Domain Name
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Hosted Zone Id
  DockerImageTag:
    Type: String
    Description: Docker Image Tag

  TaskCPU:
    Type: String
    Description: CPU Size of ECS Task
  TaskMemory:
    Type: String
    Description: Memory Size of ECS Task
  TaskMinCapacity:
    Type: String
    Description: Service Minimum Process Capacity
  TaskMaxCapacity:
    Type: String
    Description: Service Maximum Process Capacity

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/fargate/${Env}-${Project}-web'
    DeletionPolicy: Delete

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - LogGroup
    Properties:
      Family: !Sub '${Env}-${Project}-web-task'
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      TaskRoleArn:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:task-role-arn'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:task-execution-role-arn'
      ContainerDefinitions:
        - Name: !Sub '${Env}-${Project}-web-container'
          Image: !Sub
            - '${URL}:${Tag}'
            - URL:
                Fn::ImportValue: !Sub '${Env}-${Project}-ecr:web-repository-uri'
              Tag: !Ref DockerImageTag
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Sub '${Env}-${Project}-web'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Env}-${Project}-web-alb'
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      Subnets: !Split
        - ','
        - Fn::ImportValue: !Sub '${Env}-${Project}-vpc:public-subnet-ids'
      SecurityGroups:
        - Fn::ImportValue: !Sub '${Env}-${Project}-security-group:public-security-group-id'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${Project}-web-alb'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      Name: !Sub '${Env}-${Project}-web-tg'
      VpcId:
        Fn::ImportValue: !Sub '${Env}-${Project}-vpc:id'
      Protocol: HTTP
      Port: 80
      TargetType: ip
      Matcher:
        HttpCode: 200
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${Project}-web-tg'

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-2017-01'
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub '${Env}-${Project}-certificate-manager:certificate-arn'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ARecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - LoadBalancer
    Properties:
      Name: !Ref DomainName
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - TaskDefinition
      - LoadBalancer
      - TargetGroup
      - LoadBalancerListener
    Properties:
      Cluster:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:cluster-arn'
      ServiceName: !Sub '${Env}-${Project}-web-service'
      DesiredCount: !Ref TaskMinCapacity
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Sub '${Env}-${Project}-web-container'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub '${Env}-${Project}-security-group:ecs-web-security-group-id'
          Subnets: !Split
            - ','
            - Fn::ImportValue: !Sub '${Env}-${Project}-vpc:public-subnet-ids'

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - Service
    Properties:
      MinCapacity: !Ref TaskMinCapacity
      MaxCapacity: !Ref TaskMaxCapacity
      ServiceNamespace: ecs
      ResourceId: !Sub
        - 'service/${ClusterName}/${ServiceName}'
        - ClusterName:
            Fn::ImportValue: !Sub '${Env}-${Project}-ecs:cluster-name'
          ServiceName: !GetAtt Service.Name
      RoleARN:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:service-auto-scaling-role-arn'
      ScalableDimension: ecs:service:DesiredCount

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - ScalableTarget
    Properties:
      PolicyName: !Sub '${Env}-${Project}-web-service-target-tracking-scaling'
      PolicyType: TargetTrackingScaling
      ServiceNamespace: ecs
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleInCooldown: 60
        ScaleOutCooldown: 30
        TargetValue: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
