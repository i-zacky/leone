AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Web Service of ECS on Fargate

Parameters:
  Project:
    Default: leone
    Type: String
    Description: Project Name
  Env:
    Default: dev
    Type: String
    Description: Environment Name

  DomainName:
    Type: String
    Description: Domain Name
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Hosted Zone Id
  DockerImageTag:
    Type: String
    Description: Docker Image Tag

  TaskCPU:
    Type: String
    Description: CPU Size of ECS Task
  TaskMemory:
    Type: String
    Description: Memory Size of ECS Task
  TaskMinCapacity:
    Type: String
    Description: Service Minumn Process Capacity
  TaskMaxCapacity:
    Type: String
    Description: Service Maximum Process Capacity

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/fargate/${Env}-${Project}-web'

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${Env}-${Project}-web-task'
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      TaskRoleArn:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:task-role-arn'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:task-execution-role-arn'
      ContainerDefinitions:
        - Name: !Sub '${Env}-${Project}-web-container'
          Image: !Sub
            - '${RepositoryURL}:${DockerImageTag}'
            - RepositoryURL:
                Fn::ImportValue: !Sub '${Env}-${Project}-ecr:web-repository-uri'
              DockerImageTag: !Ref DockerImageTag
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Sub '${Env}-${Project}-web'

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Env}-${Project}-web-alb'
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      Subnets: !Split
        - ','
        - Fn::ImportValue: !Sub '${Env}-${Project}-vpc:public-subnet-ids'
      SecurityGroups:
        Fn::ImportValue: !Sub '${Env}-${Project}-security-group:public-security-group-id'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${Project}-web-alb'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Name: !Sub '${Env}-${Project}-web-tg'
      VpcId:
        Fn::ImportValue: !Sub '${Env}-${Project}-vpc:id'
      Protocol: HTTP
      Port: 80
      TargetType: ip
      Matcher:
        HttpCode: 200
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 20
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${Project}-web-tg'

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ApplicationLoadBalancer
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTPS
      Port: 443
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-2017-01'
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub '${Env}-${Project}-certificate-manager:certificate-arn'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ARecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Name: !Ref DomainName
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationLoadBalancer
      - LoadBalancerListener
      - ECSTaskDefinition
    Properties:
      Cluster:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:cluster-arn'
      ServiceName: !Sub '${Env}-${Project}-web-service'
      DesiredCount: !Ref TaskMinCapacity
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub '${Env}-${Project}-web-container'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub '${Env}-${Project}-security-group:ecs-web-security-group-id'
          Subnets: !Split
            - ','
            - Fn::ImportValue: !Sub '${Env}-${Project}-vpc:public-subnet-ids'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ECSService
    Properties:
      MinCapacity: !Ref TaskMinCapacity
      MaxCapacity: !Ref TaskMaxCapacity
      ServiceNamespace: ecs
      ResourceId: !Sub
        - 'service/${ClusterName}/${ServiceName}'
        - ClusterName:
            Fn::ImportValue: !Sub '${Env}-${Project}-ecs:cluster-name'
          ServiceName: !GetAtt ECSService.Name
      RoleARN:
        Fn::ImportValue: !Sub '${Env}-${Project}-ecs:service-auto-scaling-role-arn'
      ScalableDimension: ecs:service:DesiredCount

  ScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - AutoScalingTarget
    Properties:
      PolicyName: !Sub '${Env}-${Project}-svc-scale-out-policy'
      PolicyType: StepScaling
      ServiceNamespace: ecs
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0

  ScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - ECSService
      - ScaleOutPolicy
    Properties:
      AlarmDescription: Alarm to add capacity if CPU is high
      EvaluationPeriods: 3
      Statistic: Average
      TreatMissingData: notBreaching
      Period: 60
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleOutPolicy
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub '${Env}-${Project}-ecs:cluster-name'
        - Name: ServiceName
          Value: !GetAtt ECSService.Name

  ScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - AutoScalingTarget
    Properties:
      PolicyName: !Sub '${Env}-${Project}-svc-scale-in-policy'
      PolicyType: StepScaling
      ServiceNamespace: ecs
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalLowerBound: 0

  ScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - ECSService
      - ScaleInPolicy
    Properties:
      AlarmDescription: Alarm to reduce capacity if CPU is low
      EvaluationPeriods: 3
      Statistic: Average
      TreatMissingData: notBreaching
      Period: 180
      Threshold: 25
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleInPolicy
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub '${Env}-${Project}-ecs:cluster-name'
        - Name: ServiceName
          Value: !GetAtt ECSService.Name

Outputs:
  LogGroupArn:
    Value: !GetAtt LogGroup.Arn
    Export:
      Name: !Sub '${AWS::StackName}-log-group-arn'

  ECSTaskDefinitionArn:
    Value: !Ref ECSTaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-ecs-task-definition-arn'

  ApplicationLoadBalancerArn:
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-alb-arn'
  ApplicationLoadBalancerDNSName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-alb-dns-name'
  ApplicationLoadBalancerHostedZoneId:
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${AWS::StackName}-alb-hosted-zone-id'
  ApplicationLoadBalancerFullName:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
    Export:
      Name: !Sub '${AWS::StackName}-alb-full-name'
  ApplicationLoadBalancerName:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub '${AWS::StackName}-alb-name'

  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-tg-arn'
  TargetGroupFullName:
    Value: !GetAtt TargetGroup.TargetGroupFullName
    Export:
      Name: !Sub '${AWS::StackName}-tg-full-name'
  TargetGroupName:
    Value: !GetAtt TargetGroup.TargetGroupName
    Export:
      Name: !Sub '${AWS::StackName}-tg-name'

  ECSServiceArn:
    Value: !Ref ECSService
    Export:
      Name: !Sub '${AWS::StackName}-ecs-service-arn'
  ECSServiceName:
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub '${AWS::StackName}-ecs-service-name'
